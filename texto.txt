// Configuración básica de Three.js const scene = new THREE.Scene(); const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000); const renderer = new THREE.WebGLRenderer(); renderer.setSize(window.innerWidth, window.innerHeight); document.body.appendChild(renderer.domElement); // Variables del juego let coins = 0; let enemies = []; // Crear terreno const groundGeometry = new THREE.PlaneGeometry(100, 100); const groundMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, side: THREE.DoubleSide }); const ground = new THREE.Mesh(groundGeometry, groundMaterial); ground.rotation.x = Math.PI / 2; scene.add(ground); // Jugador const playerGeometry = new THREE.BoxGeometry(1, 2, 1); let playerMaterial = new THREE.MeshBasicMaterial({ color: 0x0000ff }); const player = new THREE.Mesh(playerGeometry, playerMaterial); player.position.y = 1; scene.add(player); // Cámara camera.position.z = 10; camera.position.y = 5; // Disparos const bullets = []; function shoot() { const bulletGeometry = new THREE.SphereGeometry(0.2, 8, 8); const bulletMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 }); const bullet = new THREE.Mesh(bulletGeometry, bulletMaterial); bullet.position.copy(player.position); bullets.push({ mesh: bullet, velocity: new THREE.Vector3(0, 0, -1) }); scene.add(bullet); } // Enemigos function spawnEnemy() { const enemyGeometry = new THREE.BoxGeometry(1, 2, 1); const enemyMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 }); const enemy = new THREE.Mesh(enemyGeometry, enemyMaterial); enemy.position.set(Math.random() * 20 - 10, 1, Math.random() * -20); enemies.push(enemy); scene.add(enemy); } setInterval(spawnEnemy, 2000); // Spawnear un enemigo cada 2 segundos // Detectar colisiones function detectCollisions() { bullets.forEach((bullet, bulletIndex) => { enemies.forEach((enemy, enemyIndex) => { const distance = bullet.mesh.position.distanceTo(enemy.position); if (distance < 1) { scene.remove(bullet.mesh); scene.remove(enemy); bullets.splice(bulletIndex, 1); enemies.splice(enemyIndex, 1); coins++; // Gana una moneda console.log(`Coins: ${coins}`); } }); }); } // Controles const controls = { left: false, right: false, up: false, down: false, }; document.getElementById('left').addEventListener('touchstart', () => controls.left = true); document.getElementById('left').addEventListener('touchend', () => controls.left = false); document.getElementById('right').addEventListener('touchstart', () => controls.right = true); document.getElementById('right').addEventListener('touchend', () => controls.right = false); document.getElementById('up').addEventListener('touchstart', () => controls.up = true); document.getElementById('up').addEventListener('touchend', () => controls.up = false); document.getElementById('down').addEventListener('touchstart', () => controls.down = true); document.getElementById('down').addEventListener('touchend', () => controls.down = false); document.getElementById('shoot').addEventListener('touchstart', shoot); // Tienda document.getElementById('buy-red').addEventListener('click', () => { if (coins >= 5) { coins -= 5; player.material.color.set(0xff0000); console.log('Bought Red Costume'); } }); document.getElementById('buy-green').addEventListener('click', () => { if (coins >= 10) { coins -= 10; player.material.color.set(0x00ff00); console.log('Bought Green Costume'); } }); document.getElementById('buy-yellow').addEventListener('click', () => { if (coins >= 15) { coins -= 15; player.material.color.set(0xffff00); console.log('Bought Yellow Costume'); } }); // Animación function animate() { requestAnimationFrame(animate); // Movimiento del jugador if (controls.left) player.position.x -= 0.1; if (controls.right) player.position.x += 0.1; if (controls.up) player.position.z -= 0.1; if (controls.down) player.position.z += 0.1; // Movimiento de enemigos enemies.forEach(enemy => { enemy.position.z += 0.05; }); // Actualización de disparos bullets.forEach((bullet, index) => { bullet.mesh.position.add(bullet.velocity); if (bullet.mesh.position.z < -50) { scene.remove(bullet.mesh); bullets.splice(index, 1); } }); // Detectar colisiones detectCollisions(); renderer.render(scene, camera); } animate();